<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <!-- 容器加载各模块的顺序与它们在 web.xml文件中的先后顺序无关。而是固定的：ServletContext -> listener -> fileter -> servlet -->
  <context-param><!-- 声明整个Web项目内的上下文(ServletContext)初始化参数，可以有多个 -->
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!-- 定义各个filter，按顺序初始化。过滤器的作用主要是过滤字符编码，做一些业务逻辑判断等-->
  <filter><!-- spring的字符集编码配置 -->
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param><!--定义request编码-->
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param><!--默认false，为true时response编码也被定义为与request一致-->
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter><!--springSecurity过滤器，这只是一个代理-->
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter><!--struts2.1.3以后推荐使用的过滤器-->
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter><!--自定义过滤器-->
    <filter-name>myFilter</filter-name>
    <filter-class>csdc.tool.filter.MyFilter</filter-class>
  </filter>
  <!-- filter具体使用场景 -->
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>myFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>*.action</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>
  <!-- 定义监听器，按顺序执行。Web中的监听器是Servlet规范中定义的一种特殊类，它用于监听web应用程序中的ServletContext，HttpSession和 ServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。监听器主要是做一些初始化的内容添加工作，如设置一些基本的内容，比如一些参数或者是一些固定的对象等等  -->
  <listener><!-- 追踪删除临时文件，当临时文件不再被使用时将会被立即删除。只适用于在处理上传项目之前将它们写入临时文件的情况 -->
    <listener-class>org.apache.commons.fileupload.servlet.FileCleanerCleanup</listener-class>
  </listener>
  <listener><!-- ContextLoaderListener用于启动Web容器时，自动装配ApplicationContext的配置信息，前提是ApplicationContext.xml放在/WEB-INF下；也可以指定自己的定义档，只要在<context-param>中指定"contextConfigLocation"参数 -->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener><!--日志记录。动态的改变记录级别和策略，不需要重启Web应用；把log文件定在 /WEB-INF/logs/而不需要写绝对路径 -->
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <listener><!-- 当session创建或过期时，注册表中会实时进行更新，基于HttpSessionEventPublisher发布的session生命周期事件来跟踪每一个认证用户的活动session的数量 -->
    <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  </listener>
  <listener><!-- 使Spring支持request与session的scope。scope="request"的时候，提交完成之后就销毁。scope="session"的时候，关闭浏览器销毁 -->
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  <listener><!-- 自定义监听器，初始化部分参数 -->
    <listener-class>csdc.tool.listener.StartUpListener</listener-class>
  </listener>
  <listener><!-- 自定义监听器 ，自动化数据入库 -->
    <listener-class>csdc.tool.listener.TaskConfigListener</listener-class>
  </listener>
  <listener><!-- 自定义监听器，session管理 -->
    <listener-class>csdc.tool.listener.SessionListener</listener-class>
  </listener>
  <listener><!-- 利用ehcache的监听持久化缓存 -->
    <listener-class>net.sf.ehcache.constructs.web.ShutdownListener</listener-class>
  </listener>
  <!-- 定义servlet -->
  <servlet><!-- Spring整合JAX-WS -->
    <servlet-name>services</servlet-name>
    <servlet-class>
     com.sun.xml.ws.transport.http.servlet.WSSpringServlet
     </servlet-class>
  </servlet> 
  <servlet><!-- 处理FCK的文件编码 -->
    <servlet-name>ConnectorServlet</servlet-name>
    <servlet-class>csdc.tool.fckeditor.ConnectorServlet</servlet-class>
    <init-param>
      <param-name>baseDir</param-name>
      <param-value>/upload/</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup><!-- 指定servlet被加载的顺序 -->
  </servlet>
  <servlet><!-- dwr：允许浏览器中的Javascript代码调用Web服务器上的Java代码 -->
    <servlet-name>dwr-invoker</servlet-name>
    <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
    <init-param>
      <param-name>debug</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/config/dwr.xml</param-value>
    </init-param>
    <init-param>
      <param-name>logLevel</param-name>
      <param-value>warn</param-value>
    </init-param>
    <init-param>
      <param-name>allowScriptTagRemoting</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>crossDomainSessionSecurity</param-name>
      <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>services</servlet-name>
    <url-pattern>/service/webService/*</url-pattern>
  </servlet-mapping> 
  <servlet-mapping>
    <servlet-name>ConnectorServlet</servlet-name>
    <url-pattern>/tool/fckeditor/editor/filemanager/connectors/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dwr-invoker</servlet-name>
    <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>
  <mime-mapping><!-- 压缩http请求中获取的js文件 -->
      <extension>js</extension>          
      <mime-type>application/x-javascript</mime-type>        
  </mime-mapping>
  <session-config><!-- 默认的会话超时时间间隔，以分钟为单位 -->
    <session-timeout>60</session-timeout>
  </session-config>
  <welcome-file-list><!-- 指定主页，必须是实际存在的物理文件 -->
    <welcome-file>/welcome.jsp</welcome-file>
  </welcome-file-list>

  <!--weblogic读取配置  -->
  <resource-ref>
    <description>Oracle JNDI Datasource</description>
    <res-ref-name>smdb</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
</web-app>